"""empty message

Revision ID: 693dbc97236f
Revises: 902384bf1855
Create Date: 2025-06-21 10:12:13.657621

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


revision = '693dbc97236f'
down_revision = '902384bf1855'
branch_labels = None
depends_on = None

old_options = ('APPLICATION_SUBMITTED', 'INVOICE_GENERATED', 'PAYMENT_COMPLETE', 'PENDING_AUTO_APPROVAL_PROCESSING', 'AUTO_APPROVAL_FULL_REVIEW', 'AUTO_APPROVAL_PROVISIONAL', 'AUTO_APPROVAL_APPROVED', 'FULL_REVIEW_IN_PROGRESS', 'MANUALLY_APPROVED', 'MANUALLY_DENIED', 'MORE_INFORMATION_REQUESTED', 'REGISTRATION_CREATED', 'CERTIFICATE_ISSUED', 'REGISTRATION_EXPIRED', 'NON_COMPLIANCE_SUSPENDED', 'REGISTRATION_CANCELLED', 'APPLICATION_REVIEWER_ASSIGNED', 'APPLICATION_REVIEWER_UNASSIGNED', 'NOC_SENT', 'NOC_EXPIRED', 'HOST_APPLICATION_UNIT_ADDRESS_UPDATED', 'HOST_REGISTRATION_UNIT_ADDRESS_UPDATED', 'APPLICATION_DECISION_SET_ASIDE', 'REGISTRATION_REINSTATED', 'REGISTRATION_DECISION_SET_ASIDE')
new_options = ('APPLICATION_SUBMITTED', 'INVOICE_GENERATED', 'PAYMENT_COMPLETE', 'PENDING_AUTO_APPROVAL_PROCESSING', 'AUTO_APPROVAL_FULL_REVIEW', 'AUTO_APPROVAL_PROVISIONAL', 'AUTO_APPROVAL_APPROVED', 'FULL_REVIEW_IN_PROGRESS', 'MANUALLY_APPROVED', 'MANUALLY_DENIED', 'MORE_INFORMATION_REQUESTED', 'REGISTRATION_CREATED', 'CERTIFICATE_ISSUED', 'REGISTRATION_EXPIRED', 'NON_COMPLIANCE_SUSPENDED', 'REGISTRATION_CANCELLED', 'APPLICATION_REVIEWER_ASSIGNED', 'APPLICATION_REVIEWER_UNASSIGNED', 'NOC_SENT', 'NOC_EXPIRED', 'HOST_APPLICATION_UNIT_ADDRESS_UPDATED', 'HOST_REGISTRATION_UNIT_ADDRESS_UPDATED', 'APPLICATION_DECISION_SET_ASIDE', 'REGISTRATION_REINSTATED', 'REGISTRATION_DECISION_SET_ASIDE', 'DOCUMENT_UPLOADED')

old_type = sa.Enum(*old_options, name='eventname')
new_type = sa.Enum(*new_options, name='eventname')

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    registrationnocstatus = postgresql.ENUM('NOC_PENDING', 'NOC_EXPIRED', name='registrationnocstatus')
    registrationnocstatus.create(op.get_bind(), checkfirst=True)

    op.execute('ALTER TYPE eventname RENAME TO tmp_eventname')
    new_type.create(op.get_bind())
    op.execute('ALTER TABLE events ALTER COLUMN event_name TYPE eventname USING event_name::text::eventname')
    op.execute('DROP TYPE tmp_eventname')

    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.add_column(sa.Column('added_on', sa.Date(), nullable=True))

    with op.batch_alter_table('documents_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('added_on', sa.Date(), autoincrement=False, nullable=True))

    with op.batch_alter_table('registrations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('noc_status', sa.Enum('NOC_PENDING', 'NOC_EXPIRED', name='registrationnocstatus'), nullable=True))

    with op.batch_alter_table('registrations_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('noc_status', sa.Enum('NOC_PENDING', 'NOC_EXPIRED', name='registrationnocstatus'), autoincrement=False, nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('ALTER TYPE eventname RENAME TO tmp_eventname')
    old_type.create(op.get_bind())
    op.execute('ALTER TABLE events ALTER COLUMN event_name TYPE eventname USING event_name::text::eventname')
    op.execute('DROP TYPE tmp_eventname')

    with op.batch_alter_table('registrations_history', schema=None) as batch_op:
        batch_op.drop_column('noc_status')

    with op.batch_alter_table('registrations', schema=None) as batch_op:
        batch_op.drop_column('noc_status')

    with op.batch_alter_table('documents_history', schema=None) as batch_op:
        batch_op.drop_column('added_on')

    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.drop_column('added_on')

    op.execute("DROP TYPE IF EXISTS registrationnocstatus;")
    # ### end Alembic commands ###
